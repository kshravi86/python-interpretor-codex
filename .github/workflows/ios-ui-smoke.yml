name: iOS UI Smoke

on:
  workflow_dispatch: {}

jobs:
  smoke:
    runs-on: macos-14
    env:
      APP_PROJECT: NotesApp.xcodeproj
      APP_SCHEME: NotesApp
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode 15.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      - name: Fetch Pyodide runtime assets (for on-device runtime)
        shell: bash
        env:
          PYODIDE_VERSION: ${{ vars.PYODIDE_VERSION }}
        run: |
          set -euo pipefail
          DEST="NotesApp/PyodideAssets"
          mkdir -p "$DEST"
          if [ -f "$DEST/pyodide.js" ]; then exit 0; fi
          VER="${PYODIDE_VERSION:-0.24.1}"
          URL="https://github.com/pyodide/pyodide/releases/download/${VER}/pyodide-${VER}.tar.bz2"
          TMP=$(mktemp -d)
          curl -L "$URL" -o "$TMP/pyodide.tar.bz2"
          tar -xjf "$TMP/pyodide.tar.bz2" -C "$TMP"
          rsync -a "$TMP/pyodide/" "$DEST/"

      - name: Resolve simulator (iPhone 15)
        id: sim
        shell: bash
        run: |
          set -euo pipefail
          RUNTIMES_JSON=$(xcrun simctl list runtimes -j)
          RUNTIME=$(python3 - <<'PY'
import json,sys
j=json.loads(sys.stdin.read())
ios=[r for r in j["runtimes"] if r["identifier"].startswith("com.apple.CoreSimulator.SimRuntime.iOS-") and r.get("isAvailable",True)]
ios.sort(key=lambda r: r.get("version") or r.get("productVersion","0"))
print(ios[-1]["identifier"]) if ios else sys.exit(1)
PY
          )
          DT_JSON=$(xcrun simctl list devicetypes -j)
          DT=$(python3 - <<'PY'
import json,sys
j=json.loads(sys.stdin.read())
want=["iPhone 15 Pro","iPhone 15","iPhone 14"]
for name in want:
  for dt in j["devicetypes"]:
    if dt["name"].startswith(name):
      print(dt["identifier"]); sys.exit(0)
sys.exit(1)
PY
          )
          NAME="CI iPhone Smoke"
          # Find existing or create
          DEV_JSON=$(xcrun simctl list devices "$RUNTIME" -j)
          UDID=$(python3 - <<PY
import json,sys,os
j=json.loads(os.environ['DEV_JSON'])
lst=j.get('devices',{}).get(os.environ['RUNTIME'],[])
print(next((d['udid'] for d in lst if d['name']==os.environ['NAME']),''))
PY
          )
          if [ -z "$UDID" ]; then
            UDID=$(xcrun simctl create "$NAME" "$DT" "$RUNTIME")
          fi
          echo "udid=$UDID" >> $GITHUB_OUTPUT
          echo "runtime=$RUNTIME" >> $GITHUB_OUTPUT

      - name: Boot simulator
        shell: bash
        run: |
          set -euo pipefail
          xcrun simctl shutdown "${{ steps.sim.outputs.udid }}" || true
          xcrun simctl erase "${{ steps.sim.outputs.udid }}" || true
          open -a Simulator || true
          xcrun simctl boot "${{ steps.sim.outputs.udid }}" || true
          xcrun simctl bootstatus "${{ steps.sim.outputs.udid }}" -b || true

      - name: Build for simulator (Debug)
        shell: bash
        run: |
          set -euo pipefail
          DERIVED="$RUNNER_TEMP/DerivedSmoke"
          xcodebuild -list -project "$APP_PROJECT"
          xcodebuild build \
            -project "$APP_PROJECT" \
            -scheme "$APP_SCHEME" \
            -configuration Debug \
            -sdk iphonesimulator \
            -destination "id=${{ steps.sim.outputs.udid }}" \
            -derivedDataPath "$DERIVED"
          echo "DERIVED=$DERIVED" >> $GITHUB_ENV

      - name: Install + launch + screenshot
        shell: bash
        run: |
          set -euo pipefail
          APP=$(ls "$DERIVED/Build/Products/Debug-iphonesimulator"/*.app | head -n1)
          if [ -z "$APP" ]; then echo "::error::No .app found in $DERIVED"; exit 1; fi
          xcrun simctl install "${{ steps.sim.outputs.udid }}" "$APP"
          BUNDLE=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$APP/Info.plist")
          xcrun simctl launch "${{ steps.sim.outputs.udid }}" "$BUNDLE" --args --disable-animations || true
          mkdir -p "$RUNNER_TEMP/ui-smoke"
          xcrun simctl io "${{ steps.sim.outputs.udid }}" screenshot "$RUNNER_TEMP/ui-smoke/home.png"
          ls -la "$RUNNER_TEMP/ui-smoke"

      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        with:
          name: ui-smoke
          path: ${{ runner.temp }}/ui-smoke/*.png
          retention-days: 14

