name: iOS Real-Device Smoke (BrowserStack)

on:
  workflow_dispatch:
    inputs:
      device:
        description: "iPhone device name (e.g., iPhone 15)"
        required: false
        default: "iPhone 15"
      os_version:
        description: "iOS version (e.g., 17)"
        required: false
        default: "17"

jobs:
  build-ipa:
    name: Build IPA for BrowserStack
    runs-on: macos-latest
    env:
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Fetch Python runtime
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PY_SUPPORT_REPO: beeware/Python-Apple-support
          PY_SUPPORT_TAG: 3.14-b8
          PY_TARGET_XCF_DIR: ios/Frameworks/Python.xcframework
          PY_TARGET_STDLIB: Resources/python-stdlib.zip
        run: bash scripts/fetch_python_runtime.sh

      - name: Verify runtime files
        shell: bash
        run: |
          set -e
          test -d ios/Frameworks/Python.xcframework
          test -f Resources/python-stdlib.zip

      - name: Install Apple Certificate
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: Install Provisioning Profile (Build)
        run: |
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          security cms -D -i $PP_PATH > $RUNNER_TEMP/profile.plist
          PP_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' $RUNNER_TEMP/profile.plist)
          echo "PP_UUID=$PP_UUID" >> $GITHUB_ENV

      - name: Compute build number
        run: |
          echo "NEW_BUILD=$(date +%Y%m%d%H%M)" >> $GITHUB_ENV

      - name: Archive (unsigned)
        run: |
          xcodebuild archive \
            -project NotesApp.xcodeproj \
            -scheme NotesApp \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath ${{ runner.temp }}/CodeSnake-Release.xcarchive \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO \
            CURRENT_PROJECT_VERSION=$NEW_BUILD \
            "FRAMEWORK_SEARCH_PATHS=$GITHUB_WORKSPACE/ios/Frameworks/Python.xcframework/ios-arm64" \
            "LD_RUNPATH_SEARCH_PATHS=@executable_path/Frameworks"

      - name: Export IPA (adhoc)
        run: |
          APP_DIR=$(ls -d ${{ runner.temp }}/CodeSnake-Release.xcarchive/Products/Applications/*.app | head -n 1)
          PLIST="$APP_DIR/Info.plist"
          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$PLIST")
          TEAM_ID=${{ env.IOS_TEAM_ID }}
          if [ -z "$TEAM_ID" ]; then TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' $RUNNER_TEMP/profile.plist 2>/dev/null || true); fi
          cat > $RUNNER_TEMP/export.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>ad-hoc</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PP_UUID}</string>
            </dict>
            <key>stripSwiftSymbols</key><true/>
          </dict></plist>
          EOF
          xcodebuild -exportArchive \
            -archivePath ${{ runner.temp }}/CodeSnake-Release.xcarchive \
            -exportPath   ${{ runner.temp }}/export-adhoc \
            -exportOptionsPlist $RUNNER_TEMP/export.plist
          echo "IPA_PATH=$(ls ${{ runner.temp }}/export-adhoc/*.ipa | head -n 1)" >> $GITHUB_ENV

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: BrowserStack-IPA
          path: ${{ env.IPA_PATH }}
          retention-days: 7

  run-on-browserstack:
    name: Run on BrowserStack real iPhone
    runs-on: macos-latest
    needs: build-ipa
    env:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
      DEVICE_NAME: ${{ inputs.device }}
      OS_VERSION: ${{ inputs.os_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download IPA artifact
        uses: actions/download-artifact@v4
        with:
          name: BrowserStack-IPA
          path: ipa

      - name: Upload app to BrowserStack
        id: bs_upload
        shell: bash
        run: |
          set -euo pipefail
          IPA=$(ls ipa/*.ipa | head -n 1)
          RESP=$(curl -s -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" \
                   -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
                   -F "file=@$IPA" \
                   -F "custom_id=codesnake_$(date +%s)")
          echo "$RESP" | tee bs_upload.json
          APP_URL=$(python3 -c "import json;print(json.load(open('bs_upload.json'))['app_url'])")
          echo "APP_URL=$APP_URL" >> $GITHUB_ENV
          echo "App uploaded: $APP_URL"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test deps
        run: |
          python -m pip install --upgrade pip
          pip install Appium-Python-Client==2.11.1 requests

      - name: Run smoke test on real device
        env:
          APP_URL: ${{ env.APP_URL }}
        run: |
          python tests/appium/test_bs_smoke.py | tee bs_test_output.txt

      - name: Publish session link
        if: always()
        shell: bash
        run: |
          echo "## BrowserStack Session" >> $GITHUB_STEP_SUMMARY
          if [ -f bs_session.txt ]; then
            URL=$(cat bs_session.txt)
            echo "Session: $URL" | tee bs_session_url.txt
            echo "$URL" >> $GITHUB_STEP_SUMMARY
          else
            echo "Session link not captured" | tee bs_session_url.txt
          fi
        
      - name: Upload BrowserStack test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: BrowserStack-Run
          path: |
            bs_upload.json
            bs_test_output.txt
            bs_session.txt
            bs_session_url.txt
