name: iOS Simulator Smoke

on:
  workflow_dispatch:
    inputs:
      device:
        description: "Simulator device name"
        required: false
        default: "iPhone 15"

jobs:
  sim-smoke:
    name: Build, Launch on Simulator, Capture Logs
    runs-on: macos-14
    env:
      DEVICE_NAME: ${{ inputs.device }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Fetch Python runtime (xcframework + stdlib)
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PY_SUPPORT_REPO: beeware/Python-Apple-support
          PY_SUPPORT_TAG: 3.14-b8
          PY_TARGET_XCF_DIR: ios/Frameworks/Python.xcframework
          PY_TARGET_STDLIB: Resources/python-stdlib.zip
        run: bash scripts/fetch_python_runtime.sh

      - name: Build for Simulator
        shell: bash
        run: |
          set -euo pipefail
          DERIVED=$RUNNER_TEMP/DerivedData
          xcodebuild \
            -project NotesApp.xcodeproj \
            -scheme NotesApp \
            -configuration Release \
            -sdk iphonesimulator \
            -derivedDataPath "$DERIVED" \
            CURRENT_PROJECT_VERSION=$(date +%Y%m%d%H%M) \
            "FRAMEWORK_SEARCH_PATHS=$GITHUB_WORKSPACE/ios/Frameworks/Python.xcframework/ios-arm64_x86_64-simulator" \
            "LD_RUNPATH_SEARCH_PATHS=@executable_path/Frameworks" \
            build | xcpretty || true
          APP=$(ls "$DERIVED/Build/Products/Release-iphonesimulator"/*.app | head -n 1)
          if [ -z "$APP" ]; then echo "::error::Simulator .app not found"; exit 1; fi
          echo "APP_PATH=$APP" >> $GITHUB_ENV
      - name: Collect sim inventories
        shell: bash
        run: |
          set -euo pipefail
          xcrun simctl list -j devices > "$RUNNER_TEMP/devices.json" || true
          xcrun simctl list -j runtimes > "$RUNNER_TEMP/runtimes.json" || true
          xcrun simctl list -j devicetypes > "$RUNNER_TEMP/devicetypes.json" || true
      - name: Shutdown all simulators (non-fatal)
        shell: bash
        run: |
          xcrun simctl shutdown all || true

      - name: Boot simulator
        shell: bash
        run: |
          set -euo pipefail
          # Prefer Booted iPhone; else Shutdown iPhone; else any iOS device; else create
          UDID=$(xcrun simctl list devices available -j | python3 -c "import sys,json; d=json.load(sys.stdin)['devices']; cand=[(e['udid'],e.get('state',''),e.get('name',''),rt) for rt,arr in d.items() for e in arr if e.get('isAvailable') and ('iOS' in rt)]; boot=[u for u,s,n,rt in cand if s=='Booted' and 'iPhone' in n]; shut=[u for u,s,n,rt in cand if s=='Shutdown' and 'iPhone' in n]; anyd=[u for u,s,n,rt in cand]; print((boot or shut or anyd)[0] if (boot or shut or anyd) else '')")
          if [ -z "$UDID" ]; then
            TYPE_ID=$(xcrun simctl list devicetypes -j | python3 -c "import sys,json; d=json.load(sys.stdin)['devicetypes']; m=[t['identifier'] for t in d if 'iPhone' in t['name']]; print(m[0])")
            RUNTIME_ID=$(xcrun simctl list runtimes -j | python3 -c "import sys,json; r=[x for x in json.load(sys.stdin)['runtimes'] if x.get('isAvailable') and x.get('identifier','').startswith('com.apple.CoreSimulator.SimRuntime.iOS')]; r.sort(key=lambda x:x.get('version',''), reverse=True); print(r[0]['identifier'])")
            UDID=$(xcrun simctl create CI-iPhone "$TYPE_ID" "$RUNTIME_ID")
          fi
          echo "SIM_UDID=$UDID" >> $GITHUB_ENV
          xcrun simctl boot "$UDID" || true
          for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15; do xcrun simctl bootstatus "$UDID" -b && ok=1 && break || sleep 6; done
          if [ -z "${ok:-}" ]; then xcrun simctl list devices; exit 1; fi

      - name: Install and launch with autorun
        shell: bash
        run: |
          set -euo pipefail
          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$APP_PATH/Info.plist")
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          # Start log stream early
          xcrun simctl spawn "$SIM_UDID" log stream --level debug --style syslog > "$RUNNER_TEMP/simlog.txt" 2>&1 &
          LOG_PID=$!
          # Install app with logs
          set +e
          xcrun simctl install "$SIM_UDID" "$APP_PATH" > "$RUNNER_TEMP/install.log" 2>&1
          INST_EXIT=$?
          # Launch app with autorun and capture stdout/stderr
          B64=$(python3 -c "import base64; s='print(\\\"PY SMOKE: \\", 2+2)'; print(base64.b64encode(s.encode()).decode())")
          xcrun simctl launch "$SIM_UDID" "$BUNDLE_ID" --args --autorun-b64 "$B64" --autorun-save autorun.txt > "$RUNNER_TEMP/launch.out" 2> "$RUNNER_TEMP/launch.err"
          LAUNCH_EXIT=$?
          set -e
          echo "LAUNCH_EXIT=$LAUNCH_EXIT" >> $GITHUB_ENV
          # Allow a few seconds for autorun file write
          sleep 4
          kill $LOG_PID || true

      - name: Collect autorun output and logs
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          ART=$RUNNER_TEMP/sim-artifacts
          mkdir -p "$ART"
          echo "Launch exit: ${LAUNCH_EXIT:-?}" | tee "$ART/summary.txt"
          # Copy logs
          if [ -f "$RUNNER_TEMP/simlog.txt" ]; then cp "$RUNNER_TEMP/simlog.txt" "$ART/simlog.txt"; fi
          if [ -f "$RUNNER_TEMP/install.log" ]; then cp "$RUNNER_TEMP/install.log" "$ART/install.log"; fi
          if [ -f "$RUNNER_TEMP/launch.out" ]; then cp "$RUNNER_TEMP/launch.out" "$ART/launch.out"; fi
          if [ -f "$RUNNER_TEMP/launch.err" ]; then cp "$RUNNER_TEMP/launch.err" "$ART/launch.err"; fi
          # Copy autorun output from app container
          if [ -n "${BUNDLE_ID:-}" ]; then
            CONTAINER=$(xcrun simctl get_app_container "$SIM_UDID" "$BUNDLE_ID" data || true)
            if [ -n "$CONTAINER" ] && [ -f "$CONTAINER/Documents/autorun.txt" ]; then
              cp "$CONTAINER/Documents/autorun.txt" "$ART/autorun.txt"
            fi
          fi
          # Save inventories for debugging
          for f in devices.json runtimes.json devicetypes.json; do
            [ -f "$RUNNER_TEMP/$f" ] && cp "$RUNNER_TEMP/$f" "$ART/$f" || true
          done
          ls -la "$ART" || true

      - name: Upload simulator artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: iOS-Simulator-Smoke
          path: |
            ${{ runner.temp }}/sim-artifacts



