name: iOS Ad Hoc Build (No Upload)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment name for environment-scoped secrets"
        required: false
        default: "prod"

jobs:
  adhoc:
    name: Build, Sign and Export IPA (Ad Hoc)
    runs-on: macos-latest
    environment:
      name: ${{ inputs.environment }}
    env:
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      ADHOC_PROVISION_PROFILE_BASE64: ${{ secrets.ADHOC_PROVISION_PROFILE_BASE64 }}
      IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Show Xcode version
      run: xcodebuild -version

    - name: Install SwiftLint
      run: brew install swiftlint

    - name: Lint Swift code (non-blocking)
      run: swiftlint --reporter github-actions-logging || true

    - name: Fetch Python runtime (xcframework + stdlib)
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PY_SUPPORT_REPO: beeware/Python-Apple-support
        PY_SUPPORT_TAG: 3.14-b8
        PY_TARGET_XCF_DIR: ios/Frameworks/Python.xcframework
        PY_TARGET_STDLIB: Resources/python-stdlib.zip
      run: bash scripts/fetch_python_runtime.sh

    - name: Verify runtime files exist pre-archive
      shell: bash
      run: |
        set -e
        ls -lah ios/Frameworks/Python.xcframework || { echo "::error::Missing ios/Frameworks/Python.xcframework"; exit 1; }
        ls -lah Resources/python-stdlib.zip || { echo "::error::Missing Resources/python-stdlib.zip"; exit 1; }

    - name: Verify Python runtime files
      shell: bash
      run: |
        echo "Checking bundled Python runtime files..."
        if [ -f "ThirdParty/Python/python-stdlib.zip" ]; then
          echo "✅ python-stdlib.zip found"
          ls -la "ThirdParty/Python/python-stdlib.zip"
        else
          echo "❌ python-stdlib.zip missing"
          exit 1
        fi
        
        if [ -d "ThirdParty/Python/Python.xcframework/ios-arm64/Python.framework" ]; then
          echo "✅ Python.framework found"
          ls -la "ThirdParty/Python/Python.xcframework/ios-arm64/Python.framework/"
        else
          echo "❌ Python.framework missing"
          exit 1
        fi
        
        echo "Python runtime verification complete - both stdlib and framework are bundled!"

    - name: Enforce version alignment
      shell: bash
      env:
        EXPECTED_PY_PREFIX: "3.14"
        PY_SUPPORT_TAG: ${{ env.PY_SUPPORT_TAG || '3.14-b8' }}
      run: |
        set -e
        case "$PY_SUPPORT_TAG" in
          ${EXPECTED_PY_PREFIX}*) ;; \
          *) echo "Tag $PY_SUPPORT_TAG does not match ${EXPECTED_PY_PREFIX}*"; exit 1;; \
        esac
        unzip -p Resources/python-stdlib.zip PYTHON_VERSION.txt > ver.txt || { echo "PYTHON_VERSION.txt missing"; exit 1; }
        VER=$(cut -d. -f1-2 ver.txt)
        [ "$VER" = "$EXPECTED_PY_PREFIX" ] || { echo "stdlib $VER != $EXPECTED_PY_PREFIX"; exit 1; }

    - name: Fetch CPython runtime (fallback for static linking)
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p ThirdParty/Python
        # If a static lib is already present, skip download
        if find ThirdParty/Python -type f -name 'libpython*.a' | head -n1 >/dev/null; then
          echo "Static lib already present; skipping download"
          exit 0
        fi
        # Download support package to get static lib as a robust fallback
        URL="https://github.com/beeware/Python-Apple-support/releases/download/3.14-b8/Python-3.14-iOS-support.b8.tar.gz"
        echo "Downloading CPython support from: $URL"
        curl -L "$URL" -o ThirdParty/Python/python-ios-support.tar.gz
        tar -xzf ThirdParty/Python/python-ios-support.tar.gz -C ThirdParty/Python
        echo "Extracted contents:"; find ThirdParty/Python -maxdepth 3 -mindepth 1 -print || true
        # Normalize stdlib zip name if found
        STDLIB=$(find ThirdParty/Python -maxdepth 6 -type f \( -name '*stdlib*.zip' -o -name 'python-stdlib.zip' -o -name 'stdlib.zip' \) | head -n1 || true)
        if [ -n "${STDLIB}" ] && [ ! -f ThirdParty/Python/python-stdlib.zip ]; then
          cp "$STDLIB" ThirdParty/Python/python-stdlib.zip || true
        fi

    - name: Prepare App Icons from master (no placeholders)
      run: |
        if [ ! -f branding/app_icon_1024.png ] && [ -z "$APP_ICON_MASTER" ]; then
          echo "No master icon provided; generating a default branded icon";
          python3 scripts/make_master_icon.py || true;
        fi
        APP_ICON_MASTER=${APP_ICON_MASTER:-branding/app_icon_1024.png}
        if [ -f "$APP_ICON_MASTER" ]; then
          python3 scripts/prepare_app_icons_from_master.py || true
        fi

    - name: Compute unique build number
      run: |
        NEW_BUILD=$(date +%Y%m%d%H%M)
        echo "NEW_BUILD=$NEW_BUILD" >> $GITHUB_ENV
        echo "::notice title=Build Number::CFBundleVersion will be $NEW_BUILD"

    - name: Preflight - Check required secrets presence
      run: |
        check() { if [ -z "$1" ]; then echo "::error title=Missing secret::${2} not set"; exit 1; else echo "${2}: present"; fi }
        echo "Environment: ${{ inputs.environment }}"
        check "${BUILD_CERTIFICATE_BASE64}" "BUILD_CERTIFICATE_BASE64"
        check "${P12_PASSWORD}" "P12_PASSWORD"
        check "${KEYCHAIN_PASSWORD}" "KEYCHAIN_PASSWORD"
        check "${ADHOC_PROVISION_PROFILE_BASE64}" "ADHOC_PROVISION_PROFILE_BASE64"

    - name: Install Apple Certificate
      run: |
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

    - name: Install Provisioning Profile (Ad Hoc)
      run: |
        PP_PATH=$RUNNER_TEMP/adhoc_pp.mobileprovision
        echo -n "$ADHOC_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        echo "PP_PATH=$PP_PATH" >> $GITHUB_ENV
        security cms -D -i $PP_PATH > $RUNNER_TEMP/profile.plist
        PP_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' $RUNNER_TEMP/profile.plist)
        PP_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' $RUNNER_TEMP/profile.plist)
        echo "Using Provisioning Profile: $PP_NAME ($PP_UUID)"
        echo "PP_UUID=$PP_UUID" >> $GITHUB_ENV
        BUNDLE_ID=$(/usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' $RUNNER_TEMP/profile.plist | sed 's/^.*\.//')
        echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV

    - name: Build and Archive (Release - unsigned)
      run: |
        echo "Building with bundled Python runtime..."
        echo "Python runtime files are included in Xcode project - no manual linking needed"

        build_with_flags() {
          xcodebuild archive \
            -project NotesApp.xcodeproj \
            -scheme NotesApp \
            -configuration Release \
            -sdk iphoneos \
            -archivePath ${{ runner.temp }}/CodeSnake-Release.xcarchive \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO \
            CURRENT_PROJECT_VERSION=$NEW_BUILD \
            "$@" 2>&1 | tee "$RUNNER_TEMP/build.log"
          return ${PIPESTATUS[0]}
        }

        # Try static linking first if a libpython*.a is present
        PY_LIBA=$(find ThirdParty/Python -type f -name 'libpython*.a' | head -n1 || true)
        if [ -n "$PY_LIBA" ]; then
          echo "Attempting static link with $PY_LIBA"
          INC_DIR=$(dirname "$(dirname "$PY_LIBA")")/include
          ST_FLAGS=(
            "HEADER_SEARCH_PATHS=${INC_DIR} $(pwd)/ThirdParty/Python/Python.xcframework/ios-arm64/include"
            "OTHER_LDFLAGS=$PY_LIBA"
            "GCC_PREPROCESSOR_DEFINITIONS=EXPECTED_PYVER_PREFIX=\\\"${EXPECTED_PY_PREFIX:-3.14}\\\""
            "CLANG_ENABLE_MODULES=NO"
            "OTHER_CFLAGS=-fno-modules -Wno-quoted-include-in-framework-header"
          )
          set +e; build_with_flags "${ST_FLAGS[@]}"; RC=$?; set -e
          if [ $RC -ne 0 ]; then
            echo "::warning title=Static link failed::Falling back to dynamic framework"
          else
            echo "Static link succeeded"
            exit 0
          fi
        fi

        # Fallback: dynamic framework linking with explicit search paths
        DYN_FLAGS=(
          "FRAMEWORK_SEARCH_PATHS=$(pwd)/ThirdParty/Python/Python.xcframework/ios-arm64 $(pwd)/ThirdParty/Python/Python.xcframework/ios-arm64_x86_64-simulator"
          "GCC_PREPROCESSOR_DEFINITIONS=EXPECTED_PYVER_PREFIX=\\\"${EXPECTED_PY_PREFIX:-3.14}\\\""
          "LD_RUNPATH_SEARCH_PATHS=@executable_path/Frameworks"
        )
        build_with_flags "${DYN_FLAGS[@]}"

        echo "Listing archive directory for diagnostics:"
        if [ -d "${RUNNER_TEMP}/CodeSnake-Release.xcarchive" ]; then
          find "${RUNNER_TEMP}/CodeSnake-Release.xcarchive" -maxdepth 4 -print
        else
          echo "::error title=Archive Missing::Expected archive not found at ${RUNNER_TEMP}/CodeSnake-Release.xcarchive"
          exit 1
        fi

    - name: Upload build log on failure
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: adhoc-build-log
        path: ${{ runner.temp }}/build.log

    - name: Verify app bundle contains Python runtime
      run: |
        ARCHIVE_DIR='${{ runner.temp }}/CodeSnake-Release.xcarchive'
        if [ ! -d "$ARCHIVE_DIR" ]; then
          echo "::error title=Archive Missing::Archive directory not found: $ARCHIVE_DIR"
          ls -la "${{ runner.temp }}" || true
          exit 1
        fi
        APP_DIR=$(find "$ARCHIVE_DIR" -type d -name "*.app" -maxdepth 4 | head -n 1 || true)
        if [ -z "$APP_DIR" ]; then
          echo "::error title=No app bundle found::Archive exists but contains no .app"
          echo "Archive contents:"; find "$ARCHIVE_DIR" -maxdepth 4 -print
          exit 1
        fi
        
        echo "App bundle directory: $APP_DIR"
        echo "Checking for Python runtime files in app bundle..."
        
        if [ -f "$APP_DIR/python-stdlib.zip" ]; then
          echo "✅ python-stdlib.zip found in app bundle"
          ls -la "$APP_DIR/python-stdlib.zip"
        else
          echo "❌ python-stdlib.zip missing from app bundle"
          echo "App bundle contents:"
          ls -la "$APP_DIR/"
          exit 1
        fi
        # If we dynamically linked, ensure framework is embedded; otherwise (static), it isn't required
        if otool -l "$APP_DIR/CodeSnake" | grep -q "name @rpath/Python.framework/Python"; then
          if [ -d "$APP_DIR/Frameworks/Python.framework" ]; then
            echo "✅ Python.framework found in app bundle"
            ls -la "$APP_DIR/Frameworks/Python.framework/"
          else
            echo "❌ Python.framework missing; attempting to inject from repo"
            SRC_FW=$(ls -d ThirdParty/Python/Python.xcframework/ios-arm64/Python.framework 2>/dev/null || true)
            if [ -n "$SRC_FW" ]; then
              mkdir -p "$APP_DIR/Frameworks"
              rsync -a "$SRC_FW/" "$APP_DIR/Frameworks/Python.framework/"
              echo "✅ Injected Python.framework"
            else
              echo "::error title=Embed failed::Could not locate source Python.framework to inject"
              exit 1
            fi
          fi
        else
          echo "Static linking detected; no dynamic framework required"
        fi
        
        echo "✅ Python runtime successfully included in app bundle!"

    - name: Export Signed IPA (Ad Hoc)
      run: |
        TEAM_ID="${IOS_TEAM_ID}"
        if [ -z "$TEAM_ID" ]; then TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' $RUNNER_TEMP/profile.plist 2>/dev/null || true); fi
        cat > $RUNNER_TEMP/export-options.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>ad-hoc</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>${TEAM_ID}</string>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>${BUNDLE_ID}</key>
                <string>${PP_NAME}</string>
            </dict>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        xcodebuild -exportArchive \
          -archivePath ${{ runner.temp }}/CodeSnake-Release.xcarchive \
          -exportPath ${{ runner.temp }}/export-adhoc \
          -exportOptionsPlist $RUNNER_TEMP/export-options.plist
        IPA_PATH=$(ls ${{ runner.temp }}/export-adhoc/*.ipa | head -n 1)
        if [ -z "$IPA_PATH" ]; then echo "::error title=Export failed::No IPA produced"; exit 1; fi
        echo "IPA_PATH=$IPA_PATH" >> $GITHUB_ENV
        echo "::notice title=Export Complete (Ad Hoc)::IPA=$(basename "$IPA_PATH")"


    - name: Upload Ad Hoc IPA as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: CodeSnake-AdHoc-IPA
        path: ${{ runner.temp }}/export-adhoc/*.ipa
        retention-days: 30

    - name: Sanity-check IPA payload post-export
      if: always()
      shell: bash
      run: |
        set -e
        IPA=$(ls ${{ runner.temp }}/export-adhoc/*.ipa | head -n 1)
        if [ -z "$IPA" ]; then echo "No IPA to inspect"; exit 0; fi
        TMP=$(mktemp -d)
        unzip -q "$IPA" -d "$TMP"
        APPDIR=$(ls -d "$TMP"/Payload/*.app)
        # must have stdlib zip
        test -f "$APPDIR/python-stdlib.zip"
        # must have Python framework in Frameworks/
        ls "$APPDIR/Frameworks" | grep -i "Python"
        # must include selftest.py
        test -f "$APPDIR/selftest.py"
        # verify final app is signed
        /usr/bin/codesign -dvv "$APPDIR" | grep -E 'Identifier|Authority'

    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
