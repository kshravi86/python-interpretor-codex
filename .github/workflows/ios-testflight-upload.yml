name: iOS TestFlight Upload (Apple ID)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment name for environment-scoped secrets"
        required: false
        default: "prod"

jobs:
  upload:
    name: Build, Sign and Upload to TestFlight
    runs-on: macos-latest
    environment:
      name: ${{ inputs.environment }}
    env:
      BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
      P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
      IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
      APP_STORE_CONNECT_USERNAME: ${{ secrets.APP_STORE_CONNECT_USERNAME }}
      APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Show Xcode version
      run: xcodebuild -version

    - name: Fetch Python runtime (xcframework + stdlib)
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PY_SUPPORT_REPO: beeware/Python-Apple-support
        PY_SUPPORT_TAG: 3.14-b8
        PY_TARGET_XCF_DIR: ios/Frameworks/Python.xcframework
        PY_TARGET_STDLIB: Resources/python-stdlib.zip
      run: bash scripts/fetch_python_runtime.sh

    - name: Verify runtime files exist pre-archive
      shell: bash
      run: |
        set -e
        ls -lah ios/Frameworks/Python.xcframework || { echo "::error::Missing ios/Frameworks/Python.xcframework"; exit 1; }
        ls -lah Resources/python-stdlib.zip || { echo "::error::Missing Resources/python-stdlib.zip"; exit 1; }

    - name: Compute unique build number
      run: |
        NEW_BUILD=$(date +%Y%m%d%H%M)
        echo "NEW_BUILD=$NEW_BUILD" >> $GITHUB_ENV
        echo "::notice title=Build Number::CFBundleVersion will be $NEW_BUILD"

    - name: Install Apple Certificate
      run: |
        if [ -z "$BUILD_CERTIFICATE_BASE64" ]; then echo "BUILD_CERTIFICATE_BASE64 not set"; exit 1; fi
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH

    - name: Install Provisioning Profile (App Store)
      run: |
        if [ -z "$BUILD_PROVISION_PROFILE_BASE64" ]; then echo "BUILD_PROVISION_PROFILE_BASE64 not set"; exit 1; fi
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        echo "PP_PATH=$PP_PATH" >> $GITHUB_ENV
        # Extract profile metadata
        security cms -D -i $PP_PATH > $RUNNER_TEMP/profile.plist
        PP_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' $RUNNER_TEMP/profile.plist)
        PP_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' $RUNNER_TEMP/profile.plist)
        echo "Using Provisioning Profile: $PP_NAME ($PP_UUID)"
        echo "PP_UUID=$PP_UUID" >> $GITHUB_ENV
        echo "PP_NAME=$PP_NAME" >> $GITHUB_ENV

    - name: Build and Archive (Release - unsigned)
      run: |
        # Ensure the linker can find Python.framework from the downloaded xcframework
        WS="$GITHUB_WORKSPACE"
        PY_FW_SEARCH="$WS/ios/Frameworks/Python.xcframework/ios-arm64"
        xcodebuild archive \
          -project NotesApp.xcodeproj \
          -scheme NotesApp \
          -configuration Release \
          -destination 'generic/platform=iOS' \
          -archivePath ${{ runner.temp }}/CodeSnake-Release.xcarchive \
          CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO \
          CURRENT_PROJECT_VERSION=$NEW_BUILD \
          "FRAMEWORK_SEARCH_PATHS=$PY_FW_SEARCH" \
          "LD_RUNPATH_SEARCH_PATHS=@executable_path/Frameworks"

    - name: Extract App Metadata (version/build/bundle)
      run: |
        APP_DIR=$(ls -d ${{ runner.temp }}/CodeSnake-Release.xcarchive/Products/Applications/*.app | head -n 1)
        PLIST="$APP_DIR/Info.plist"
        if [ ! -f "$PLIST" ]; then echo "::error title=Info.plist not found::$PLIST"; exit 1; fi
        APP_VERSION=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST")
        APP_BUILD=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST")
        BUNDLE_ID=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleIdentifier' "$PLIST")
        echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
        echo "APP_BUILD=$APP_BUILD" >> $GITHUB_ENV
        echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
        echo "::notice title=Build Metadata::BundleID=$BUNDLE_ID Version=$APP_VERSION Build=$APP_BUILD"

    - name: Generate Export Options (App Store Connect)
      run: |
        TEAM_ID="${IOS_TEAM_ID}"
        if [ -z "$TEAM_ID" ]; then TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' $RUNNER_TEMP/profile.plist 2>/dev/null || true); fi
        cat > $RUNNER_TEMP/export-options.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>${TEAM_ID}</string>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>provisioningProfiles</key>
            <dict>
                <key>${BUNDLE_ID}</key>
                <string>${PP_UUID}</string>
            </dict>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>uploadSymbols</key>
            <true/>
        </dict>
        </plist>
        EOF

    - name: Export Signed IPA
      run: |
        xcodebuild -exportArchive \
          -archivePath ${{ runner.temp }}/CodeSnake-Release.xcarchive \
          -exportPath ${{ runner.temp }}/export-release \
          -exportOptionsPlist $RUNNER_TEMP/export-options.plist
        IPA_PATH=$(ls ${{ runner.temp }}/export-release/*.ipa | head -n 1)
        if [ -z "$IPA_PATH" ]; then echo "::error title=Export failed::No IPA produced"; exit 1; fi
        echo "IPA_PATH=$IPA_PATH" >> $GITHUB_ENV
        echo "::notice title=Export Complete::IPA=$(basename "$IPA_PATH") BundleID=$BUNDLE_ID Version=$APP_VERSION Build=$APP_BUILD"

    - name: Upload Signed IPA as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: CodeSnake-Release-IPA
        path: ${{ runner.temp }}/export-release/*.ipa
        retention-days: 90

    - name: Upload to TestFlight (Apple ID)
      env:
        ASC_USERNAME: ${{ env.APP_STORE_CONNECT_USERNAME }}
        ASC_PASSWORD: ${{ env.APP_SPECIFIC_PASSWORD }}
      run: |
        IPA_PATH=$(ls ${{ runner.temp }}/export-release/*.ipa | head -n 1)
        if [ -z "$IPA_PATH" ]; then echo "No IPA found"; exit 1; fi
        if [ -z "$ASC_USERNAME" ] || [ -z "$ASC_PASSWORD" ]; then
          echo "::error title=Missing credentials::APP_STORE_CONNECT_USERNAME/APP_SPECIFIC_PASSWORD not set"; exit 1;
        fi
        echo "::group::Uploading to App Store Connect via Apple ID (altool)"
        xcrun altool --upload-app -f "$IPA_PATH" -t ios -u "$ASC_USERNAME" -p "$ASC_PASSWORD" --verbose
        EXITCODE=$?
        echo "::endgroup::"
        if [ $EXITCODE -ne 0 ]; then echo "::error title=Upload failed::altool exit $EXITCODE"; exit $EXITCODE; fi
        echo "::notice title=Upload Succeeded::Uploaded BundleID=$BUNDLE_ID Version=$APP_VERSION Build=$APP_BUILD"

    - name: Clean up keychain
      if: always()
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
