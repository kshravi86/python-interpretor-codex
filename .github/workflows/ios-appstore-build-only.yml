name: iOS App Store Build (No Upload)

on:
  workflow_dispatch: {}

jobs:
  build:
    runs-on: macos-14
    env:
      APP_PROJECT: NotesApp.xcodeproj
      APP_SCHEME: NotesApp
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode 15.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      - name: Install Apple Certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${BUILD_CERTIFICATE_BASE64:-}" ] || [ -z "${P12_PASSWORD:-}" ] || [ -z "${KEYCHAIN_PASSWORD:-}" ]; then
            echo "::error::Missing signing secrets (BUILD_CERTIFICATE_BASE64, P12_PASSWORD, KEYCHAIN_PASSWORD)"; exit 1; fi
          CERT=$RUNNER_TEMP/codesnake.p12
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o "$CERT"
          KEYCHAIN=$RUNNER_TEMP/app-signing.keychain-db
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security set-keychain-settings -lut 21600 "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN"
          security import "$CERT" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN"
          security list-keychain -d user -s "$KEYCHAIN"

      - name: Install App Store Provisioning Profile
        env:
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        run: |
          set -euo pipefail
          if [ -z "${BUILD_PROVISION_PROFILE_BASE64:-}" ]; then echo "::error::Missing BUILD_PROVISION_PROFILE_BASE64"; exit 1; fi
          PP=$RUNNER_TEMP/appstore.mobileprovision
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o "$PP"
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp "$PP" "$HOME/Library/MobileDevice/Provisioning Profiles"
          security cms -D -i "$PP" > $RUNNER_TEMP/profile.plist
          PP_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' $RUNNER_TEMP/profile.plist)
          echo "Using App Store profile UUID: $PP_UUID"
          echo "PP_UUID=$PP_UUID" >> $GITHUB_ENV

      - name: Build and Archive (unsigned Release)
        run: |
          set -euo pipefail
          xcodebuild archive \
            -project "$APP_PROJECT" \
            -scheme "$APP_SCHEME" \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath ${{ runner.temp }}/CodeSnake-Release.xcarchive \
            CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO

      - name: Generate Export Options (App Store)
        env:
          IOS_TEAM_ID: ${{ secrets.IOS_TEAM_ID }}
        run: |
          TEAM_ID="${IOS_TEAM_ID}"
          if [ -z "$TEAM_ID" ]; then TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' $RUNNER_TEMP/profile.plist 2>/dev/null || true); fi
          cat > $RUNNER_TEMP/export-options.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string>${TEAM_ID}</string>
            <key>signingCertificate</key>
            <string>Apple Distribution</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>com.venki18.codesnake</key>
              <string>${PP_UUID}</string>
            </dict>
            <key>stripSwiftSymbols</key>
            <true/>
            <key>uploadSymbols</key>
            <false/>
          </dict>
          </plist>
          EOF

      - name: Export Signed IPA (no upload)
        run: |
          set -euo pipefail
          OUT=${{ runner.temp }}/export-appstore
          mkdir -p "$OUT"
          xcodebuild -exportArchive \
            -archivePath ${{ runner.temp }}/CodeSnake-Release.xcarchive \
            -exportPath "$OUT" \
            -exportOptionsPlist $RUNNER_TEMP/export-options.plist
          ls -la "$OUT"

      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: CodeSnake-AppStore-IPA
          path: ${{ runner.temp }}/export-appstore/*.ipa
          retention-days: 30

